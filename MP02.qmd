---
title: "Mini Project#2 - Hollywood Analysis"
author: "Harry Sohal"
format: html
execute: 
  cache: true
code-fold: true
code-summary: "Show the code"
editor: visual
---

## Introduction

This project examines trends in IMDb movie data to understand factors influencing film success. It focuses on genre popularity and critical ratings over time, uncovering what makes a successful film project. We can then use this analysis to pitch a new project.

```{r set up, include=FALSE, results="hide"}
required_packages <- (c('ggplot2','dplyr','tidyr','readr',"stringr","gganimate"))
lapply(required_packages, library, character.only = TRUE)
```

```{r download, cache=TRUE, cache.lazy=FALSE, include=FALSE}
library(dplyr)
library(tidyr)
library(tidyverse)
get_imdb_file <- function(fname){
    BASE_URL <- "https://datasets.imdbws.com/"
    fname_ext <- paste0(fname, ".tsv.gz")
    if(!file.exists(fname_ext)){
        FILE_URL <- paste0(BASE_URL, fname_ext)
        download.file(FILE_URL, 
                      destfile = fname_ext)
    }
    as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE))
}

## loading the imdb files ###
NAME_BASICS  <- get_imdb_file("name.basics")
TITLE_BASICS     <- get_imdb_file("title.basics")
TITLE_EPISODES   <- get_imdb_file("title.episode")
TITLE_RATINGS    <- get_imdb_file("title.ratings")
TITLE_CREW       <- get_imdb_file("title.crew")
TITLE_PRINCIPALS <- get_imdb_file("title.principals")
options(timeout = 650)
```

#### Data Sub-Sampling: Bringing the Data Down to a Fluid Size

Since the data is very large we will need to reduce the size of the data by filtering out the information that is not useful for analysis. We can do this by removing people with less than 2 "known for" title credits and also removing rare movies with less than 100 ratings.

```{r 2}
library(ggplot2)
TITLE_RATINGS |>
    ggplot(aes(x=numVotes)) + 
    geom_histogram(bins=30,fill='blue') +
    xlab("Number of IMDB Ratings") + 
    ylab("Number of Titles") + 
    ggtitle("Majority of IMDB Titles Have Less than 100 Ratings") + 
    theme_bw() + 
    scale_x_log10(label=scales::comma) + 
    scale_y_continuous(label=scales::comma)
```

The graph above is a great representation of the distribution of the our movie data with number of ratings as a descriptor. Showcases how a significant chunk of our date has a number of ratings that is less than 100.

#### Filtering the data

```{r 3}
library(stringr)
library(dplyr)
NAME_BASICS <- NAME_BASICS |> 
  filter(str_count(knownForTitles, ",") > 1) #filtering the known for titles
#removing those titles that have less than 100 ratings

TITLE_RATINGS <- TITLE_RATINGS |>
    filter(numVotes >= 100)
# now using this to reduced date to filter all the other tables with semi_join 
TITLE_BASICS <- TITLE_BASICS |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_CREW <- TITLE_CREW |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))

TITLE_EPISODES_1 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(tconst == tconst))
TITLE_EPISODES_2 <- TITLE_EPISODES |>
    semi_join(TITLE_RATINGS, 
              join_by(parentTconst == tconst))

TITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,
                            TITLE_EPISODES_2) |>
    distinct()

TITLE_PRINCIPALS <- TITLE_PRINCIPALS |>
    semi_join(TITLE_RATINGS, join_by(tconst == tconst))

rm(TITLE_EPISODES_1)
rm(TITLE_EPISODES_2)
```

The code above uses a semi-join to filter the other tables, ensuring that they only retain rows with keys that match those in the initial table without actually joining any tables together.

### Cleaning the data

Most of the time, data will contain many discrepancies. In the case of this data the source used the character \\\\N to representing a missing value within numeric columns. This raises two problems, firstly R does not recognize \\\\N as null, and the columns that should be numeric are in the string format. We can fix both by using as.numeric , which will convert the columns into numeric and also turn unrecognized strings into NAs.

```{r cleaning}
### Cleaning the data ####
glimpse(TITLE_BASICS)
print("________________")
glimpse(TITLE_EPISODES)

NAME_BASICS <- NAME_BASICS |>
    mutate(birthYear = as.numeric(birthYear),
           deathYear = as.numeric(deathYear)) # using the as numeric to force non-numeric into actual N/A instead of the \\N.R provides by the data

TITLE_BASICS <- TITLE_BASICS |>
    mutate(startYear = as.numeric(startYear),
           endYear = as.numeric(endYear),
           isAdult = as.logical(isAdult))
TITLE_EPISODES <- TITLE_EPISODES |>
    mutate(seasonNumber = as.numeric(seasonNumber),
           episodeNumber = as.numeric(episodeNumber))
```

Our data also contains rows that have multiple values per cell. Separating these into their own rows will allow us to do a more detailed analysis later on. The code below does exactly that.

```{r sep longer}
NAME_BASICS |> separate_longer_delim(knownForTitles, ",") |> slice_head(n=10)
```

### TASK 2

#### How many movies are in our data set? How many TV series? How many TV episodes?

To answer this question we can first find out which table provides the answer efficiently. Looking at the tables, TITLE_BASICS seems to contain the most relevant information. By first using the Unique function on the title type column, we can see how best to filter our data to count each category.

```{r}
  unique(TITLE_BASICS$titleType)
```

This shows us all the categories in the column and how to properly query them without scrolling through hundreds of rows of data. This shows some interesting information like the video game category which you wouldn't expect to see on a film database

```{r}
cat("Number of Movies in Data:",  TITLE_BASICS %>% filter(titleType == "movie") %>% summarise(count = n()) %>% pull(count),"\n") 
cat("Number of TV Series:", TITLE_BASICS %>% filter(titleType == "tvSeries") %>% summarise(count = n()) %>% pull(count),"\n")
cat("Number of TV episodes:", TITLE_BASICS %>% filter(titleType == "tvEpisode") %>% summarise(count = n()) %>% pull(count))
```

#### Who is the oldest living person in our data set?

In order to get an accurate answer, and basing it mostly on the data at hand we must use the filter function for living people and getting the minimum birth year that makes sense. This assumes that the death date is in fact accurate and is a death date. Something to note is that at least one group of people is listed in this table, under the name Cherry Bullet with a death date of 2024. This data point is misleading as this is not a single person but a KPOP group, and the death date is the date the band separated.

```{r}
NAME_BASICS %>% filter(is.na(deathYear),!is.na(birthYear), 2024-birthYear <= 100) %>% arrange(birthYear) %>% head(10)

```

This code finds all the people with missing death dates and also filters for and age max of 100. Any list of data with a calculated age more than this not only starts to become unreasonable but also fails to be true after a quick Google search. Using this method we get Eva Marie Saint.

### There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings. What is it? What series does it belong to?

To answer this we will need to do a couple of join statements.

```{r}
#| cache: true
series_name <- TITLE_EPISODES %>% #allows us to get the name of show,not just episode
  inner_join(TITLE_BASICS, by = c('parentTconst' = 'tconst')) %>% 
  filter(titleType == "tvSeries") %>% 
  select(parentTconst,originalTitle) %>% 
  distinct(parentTconst, .keep_all = TRUE)
  
episodes_ranked <- TITLE_EPISODES %>% 
  left_join(TITLE_BASICS, by = 'tconst') %>% #
  inner_join(TITLE_RATINGS, by = 'tconst') %>%
  inner_join(series_name, by = "parentTconst") %>% 
  filter(numVotes > 200000 & averageRating == 10) %>% 
  rename(show_name = originalTitle.y)
episodes_ranked %>% select(primaryTitle,show_name,averageRating)
```

Using the left join in the first statement we can assure that we get the column we need to do the join with series_name data frame and the other `inner_join`'s allow us to only get the matching data. The answer to this question is no surprise to me being a huge Breaking Bad fan.

### What four projects is the actor Mark Hamill most known for?

```{r mark hamill}
  
NAME_BASICS |> 
  separate_longer_delim(knownForTitles, ",") %>% 
  filter(primaryName == "Mark Hamill") %>%
  inner_join(TITLE_BASICS,by = c('knownForTitles' = 'tconst')) %>% 
  select(primaryName,primaryTitle)
```

Using an inner join after separating the known for column into unique cells allows us to see exactly what movies Hamill is best known for. We that it is the original Star wars films.

### What TV series, with more than 12 episodes, has the highest average rating?

Answering this question requires some more joining as previously done as well as a statement that counts episodes per show and filters based a count greater than 12. Along with this i've also applied a `dense_rank` function. This ranks the averages, while also accounting for shows that have equal rating. The highest ranked shows under these conditions have a 9.7, and you can see from the dense rank the is a few shows with that rating. The interesting part is that Breaking Bad is ranked in 3rd position. I believe this to be because the greater than 12 episodes condition allows some obscure shows to be introduced. Lets change that number to 60 and see the results.

#### TV Ranking Under Greater than 12 Condition

```{r tv ranking 1}
tv_ranked<- TITLE_EPISODES %>%
   inner_join(TITLE_RATINGS, by = c('parentTconst'='tconst')) %>%
   inner_join(TITLE_BASICS, by = c('parentTconst' = 'tconst')) %>% 
   group_by(parentTconst) %>% 
   filter(n()>12) %>% 
   ungroup() %>% 
   select(primaryTitle,averageRating) %>%
   distinct(primaryTitle, .keep_all = TRUE) %>% 
   mutate(rank = dense_rank(desc(averageRating))) %>% 
   arrange(rank)
DT::datatable(tv_ranked %>% head(35),filter = 'top', options = list(
  pageLength = 5))
```

#### TV Ranking Under Greater than 60 Condition

```{r tv ranking 2, include=FALSE}
tv_rank_60<- TITLE_EPISODES %>% 
    inner_join(TITLE_RATINGS, by = c('parentTconst'='tconst')) %>% 
  inner_join(TITLE_BASICS, by = c('parentTconst' = 'tconst')) %>% 
  group_by(parentTconst) %>% 
  filter(n()>60) %>% 
  ungroup() %>% 
  select(primaryTitle,averageRating) %>% 
  distinct(primaryTitle, .keep_all = TRUE) %>%
  mutate(rank = dense_rank(desc(averageRating))) %>% 
  arrange(rank)

DT::datatable(tv_rank_60 %>% head(35),filter = 'top', options = list(
  pageLength = 5))
```

Changing the count to 60 did not seem to make a significant difference to 20 rows, and the first page as well as, the main answer are unchanged.

### Is it true that episodes from later seasons of Happy Days have lower average ratings than the early seasons?

The best way to answer this question is to see the relation graphically. After making the data frame below we can use that to create 2 plots, one to display the average for each episode and one to display the season average for a cleaner distinction of relation.

```{r happy days}
happy_days<- TITLE_EPISODES %>%
  inner_join(TITLE_RATINGS, by = c('tconst'='tconst')) %>%
  inner_join(TITLE_BASICS, by = c('parentTconst' = 'tconst')) %>% 
  filter(primaryTitle == 'Happy Days') %>% 
  mutate(season_episode= str_c(seasonNumber,episodeNumber, sep = ",")) %>%
  select(averageRating,season_episode,seasonNumber,episodeNumber) %>% 
  arrange(seasonNumber,episodeNumber) %>% 
  group_by(seasonNumber) %>% 
  mutate(season_average = mean(averageRating))

ggplot(happy_days, aes(x = season_episode, y = averageRating)) +
  geom_point(size = 2.5,color = "purple") +
  labs(title = "Average Ratings of Happy Days Episodes",
       y = "Average Rating", x = "Show Timeline") +
  theme_bw() +
  theme(axis.text.x = element_blank())

```

Seems like there might be a downward trend.

```{r, message=FALSE}
ggplot(happy_days, aes(x = seasonNumber, y = season_average)) +
  geom_point(size = 2.5, color = "purple") +
  geom_smooth(se = FALSE)+
  labs(title = "Average Ratings of Happy Days by Season",
       y = "Seasonal Average Rating", x = "Season Number") +
  theme_bw()
  
```

The above chart shows more clearly that were was a decline in rating as the show went on it was trending upwards towards the last few seasons. This indicates the show runners might have caught on to declining ratings and made changes to account for it. Using an animation we can see how drastic the drop from the trend was.

```{r animated}
smooth_vals = predict(loess(season_average~seasonNumber,happy_days))
 
ggplot(happy_days, aes(x = seasonNumber, y = season_average)) +
  geom_point(size = 4, color = "purple") +
  geom_line(aes(y = smooth_vals, color = "Predicted Trend"), linewidth = 2, linetype = 'dotdash') +
  labs(title = "Average Ratings of Happy Days by Season", 
       y = "Seasonal Average Rating", 
       x = "Season Number", 
       color = "Legend") +
  theme_bw() +
  transition_reveal(seasonNumber) +
  ease_aes('linear')+
   theme(legend.position = "bottom")
  


```

## Task 3: Creating a Metric

When deciding a metric its important to consider both the number of votes and the rating together. At first I thought we could simply do a ratio or multiplication of the two number to get a single value to judge the over all reception of a film, however this would cause some scores to be misleading. For example if we were to multiply the rating and number of votes, and say the higher the number the better, this would lead to some movies with large votes and low ratings to still be ranked relatively high. So to solve this problem I took three steps:

1.  **Binning the Votes**: The votes have a large number of variance between them, and in order to effectively use this data in a metric it would be best to bin them. I chose 10 bins, effectively making it so that the number of votes will be confined into a range 1-10, with each number having a range of votes similar to a histogram. To do this we use: `mutate(vote_bin = ntile(numVotes, n=10))`

2.  **Taking the Log of the Scores:** At first,I was messing with the idea of using a log to account for the issues previously stated but decided binning the data was best course of action. However, I found that taking the log of these numbers made the score between 0 and 1 thus making it so when we multiply it with the vote bin, a perfect rating had an overall score that was equal to the bin number. So a movie with a 10 average rating and a was in the highest bin(10) had a combined metric equal to 10.

3.  **Multiply the Log of the scores and the Vote Bin:** This has the effective stated above. A film with a 10 rating and an sufficiently large number of votes will score an overall rating of 10, which I think makes this metric quite interesting. To make this metric sound fancy and grandiose ill call it the *"Cinematic Log Index"* .

    #### 1. Choose the top 5-10 movies on your metric and confirm that they were indeed box office successes.

    ```{r Task 3 a}
     
    TITLE_BASICS <- TITLE_BASICS %>% 
      inner_join(TITLE_RATINGS,by = 'tconst')
     ## creating a metric
    popular_titles <- TITLE_BASICS %>% 
      filter(numVotes > 500)
    popular_titles <- popular_titles %>% mutate(vote_bin = ntile(numVotes, n=10))
    popular_titles <- popular_titles %>% 
      mutate(CLI = log10(averageRating)*vote_bin)

    popular_titles %>% 
      select(primaryTitle,CLI) %>% 
      arrange(desc(CLI)) %>% 
      head(10)
    ```

The results show the Breaking Bad episode being number 1 and a number of extremely popular TV programs following, including Avatar, Succession, Bojack Horseman, Six Feet Under, and Game of Thrones. Lets filter for movies and see the results.

```{r Task 3a 2}
 popular_titles %>% 
   filter(titleType == "movie") %>% 
   select(primaryTitle,CLI) %>% 
  arrange(desc(CLI)) %>% 
  head(10)
  
```

As you can see these are some of the best movies of all time including The Godfather, 12 Angry Men, and the Lord of the Rings and The Dark Knight in the 8th and 9th positions.

#### 2. Choose 3-5 movies with large numbers of IMDb votes that score poorly on your success metric and confirm that they are indeed of low quality.

```{r task 3 b}
 popular_titles %>% 
  select(primaryTitle,CLI,vote_bin) %>% 
  arrange(desc(vote_bin),CLI) %>% 
  head(10)
```

As you can see this query returns a handful of garbage films like "The Pogmentary", which has articles calling it the worst TV show or Movie on IMDB of all time.

#### 3. Choose a prestige actor or director and confirm that they have many projects with high scores on your success metric.

```{r actors}
NAMES <- NAME_BASICS |> 
  separate_longer_delim(knownForTitles, ",") %>% 
  select(knownForTitles,primaryName)

popular_titles <-popular_titles %>%
  inner_join(NAMES,by=c('tconst'='knownForTitles')) 
  
#popular_titles = select(popular_titles,-10,-11,-12,-13)

(popular_titles %>% 
  filter(primaryName =='Robert De Niro') %>% 
  select(primaryName,CLI,averageRating,primaryTitle))
```

Looks like the CLI works for popular actors as well. You can see that taking the vote bin into account the CLI is actually higher than the average rating.

#### Perform at least one other form of ‘spot check’ validation.

Lets check two popular Ben Affleck movies both known for their "quality".

```{r glgi}
popular_titles %>%
  filter(primaryTitle == "Gigli"|primaryTitle == 'Good Will Hunting') %>% 
  select(CLI,primaryTitle,vote_bin) %>% 
  distinct(primaryTitle,.keep_all = TRUE)
```

The CLI score works as expected here.

#### 5. Come up with a numerical threshold for a project to be a ‘success’; that is, determine a value v such that movies above v are all “solid” or better.

Based on the results below, and a confirmation with Google, 8 seems to be a great threshold.

```{r}
popular_titles %>%
  filter(CLI >= 8 & startYear > 2000) %>% 
  select(CLI,primaryTitle,vote_bin) %>% 
  arrange(CLI) %>% 
  distinct(primaryTitle,.keep_all = TRUE) %>% 
  head(10)

```

###  **Task 4: Trends in Success Over Time**

#### What was the genre with the most “successes” in each decade?

Lets start by first filtering to get decades that are more recent by filtering for greater than 1959. Than we can use floor divide to get the decades , followed by using `summarise` and `slice_max` to get highest count in each decade.

```{r, decades}

recent <- popular_titles %>% 
  filter(startYear > 1959) %>%
  mutate(decade = floor(as.numeric(startYear) / 10) * 10)

decade <-recent %>% 
 filter(CLI > 8) %>% 
 group_by(genres,decade) %>%
 separate_longer_delim(genres, ",") %>% 
 group_by(decade, genres) %>%  
 summarise(num_success = n()) %>%
 slice_max(num_success, n = 1) %>%  
 arrange(decade)

decade
```

As you can see the action and drama are both very popular.

#### What genre consistently has the most “successes”? What genre used to reliably produced “successes” and has fallen out of favor?

From the results above you can see that the action and adventure genre has always had a large number of succeses and the drama genre had a number of successes early on and none in recent decades.

#### What genre has produced the most “successes” since 2010? Does it have the highest success *rate* or does it only have a large number of successes because there are many productions in that genre?

We can see from above that the action genre has the highest number in 2010, but does it have a good success rate?

```{r suc rate}
recent %>% 
  filter(decade== 2010) %>% 
  separate_longer_delim(genres, ",") %>% 
  group_by(genres) %>% 
  mutate(total_n_genre = n()) %>% #total rows per genre
  filter(CLI > 8) %>%
  mutate(success_rate = n() / total_n_genre) %>% 
  select(genres,decade,success_rate)
```

Based on success rate the Adventure genre is actually the best for the 2010 decade.

#### What genre has become more popular in recent years?

```{r 2020 suc rate}
rate_2020 <-recent %>% 
  filter(decade== 2020) %>% 
  separate_longer_delim(genres, ",") %>% 
  group_by(genres) %>% 
  mutate(total_n_genre = n()) %>% #total rows per genre
  filter(CLI > 8) %>%
  mutate(success_rate = n() / total_n_genre) %>% 
  select(genres,decade,success_rate)

ggplot(rate_2020,aes(x = genres,y=success_rate,fill = genres))+ 
  geom_bar(stat = 'identity')+
  theme_bw()+
  theme(axis.text.x = element_text(angle = 45,hjust= 1))+
  theme(legend.position ="none")+
  labs(title = "2020 Success Rate By Genres", y ='Rate',x= "Genre")
  
```

### Task 5: Key **Personnel**

Based on the on some previous analysis I have already decided to pick one of the actors as Robert De Niro. The other actor will need to be found through some more analysis.

```{r new star}
recent <- popular_titles %>% 
  filter(startYear > 1959) %>%
  mutate(decade = floor(as.numeric(startYear) / 10) * 10)

recent %>% 
  filter(startYear > 2022) %>% 
  select(primaryName,genres,CLI) %>% 
  arrange(desc(CLI)) %>% 
  head(10)
```

Here I see a familiar name, Pedro Pascal. With this new information I will choose Pedro Pascal, Robert De Niro and pair them with original director Martin Scorsese. The choice of these people is based on their household name status, and the metric I've designed where they all score very well, \> 9.

### **Task 6: Finding a Classic Movie to Remake**

Based on the above results and the some previous analysis I will choose to remake the movie Raging Bull including Robert De Niro as Fan service, staring Pedro Pascal in the main role. This movie and key people have large number of reviews, great ratings, and great CLI's.

### Task 7: Pitch

In the new age of cinema we see that often the box office is dominated by massively expensive yet emotionally and artistically deprived pieces of work that have started to bore much of the audience. With every movie trying to become the next action filled, 8 part marvel universe movie we have the opportunity to take a step back and release a film that satisfies critiques, fans of film, and introduce a classic to the younger generation. I purpose we take the class film Raging Bull and remake it, staring Pedro Pascal and of course De Niro. Lets get into some of benefits doing this remake.

**Success Metric:**

Based on success metric that takes into account both number of ratings and the Average IMDB rating the, original movie as well as the people involved all have very high scores. This metric is called the *CLI.* Lets take a look at the peoples scores.

```{r}
recent %>% 
  select(primaryName,CLI) %>% 
  filter(primaryName %in% c('Robert De Niro', 'Pedro Pascal',"Martin Scorsese") & CLI > 9) %>% 
  distinct(primaryName,.keep_all = TRUE) %>% 
  arrange(desc(CLI))

```

We can see that they have all been part of productions that both very popular and very good.

**Rapid Rise of Dramatic Films:**

We know from that the most popular film genre is the action genre. However this genre is not only saturated its extremely expensive to make. According to Investopedia the cost of some action films cost over 200 million dollars like Spider-man 2, Avatar, and many others. This begs the question does it really make sense to make another action film at such a high cost when the market saturation is so high. We can see from the above bar chart that the drama genre is the second highest success rate tied with Adventure. See the rise of the drama genre below.

```{r pitch graph}
dramas <- recent %>%
  separate_longer_delim(genres, ",") %>%
  filter(genres == "Drama") %>%
  group_by(decade) %>%
  summarise(avg_CLI = mean(CLI, na.rm = TRUE)) %>%  
  distinct(decade, .keep_all = TRUE)

ggplot(dramas, aes(x = decade, y = avg_CLI)) +
  geom_line(color = "darkorange",size = .7,alpha = .5) +
  geom_point(shape = 24,fill = "yellow", size = 3)+
  theme_bw() +
  labs(x = "Time", y = "Cinematic Log Index Average") +
  ggtitle("Rapid Increase of Drama Films")+
  transition_reveal(decade)
```

**Success Prone Cast:**

One of the biggest reasons, if not the most important reason I am sure this movie will be a success if the cast. The cast contains two legends of the industry De Niro and Scorsese. Along with them Ive chosen a newer actor is extremely well received. Lets take a look at the sucess rate of the 3 of them.

```{r}
cast_success<- recent %>%
  filter(primaryName %in% c('Robert De Niro', 'Pedro Pascal',"Martin Scorsese")) %>% 
  group_by(primaryName) %>%
  distinct(primaryTitle,.keep_all = TRUE) %>% 
  mutate(num_proj = n()) %>% 
  filter(CLI >= 8) %>% 
  mutate(success_rate =n()/num_proj) %>% 
  select(primaryTitle,primaryName,CLI,success_rate)
cast_success
  
```

Quite amazing, based on this CLI \> 8 metric of success, and of all the titles in the in the known for section the selected cast has a 100% success rate.

**Classic Cliche Trailer:**

From director Martin Scorsese, the visionary behind *Goodfellas*, *Taxi Driver*, and many more iconic films;\
From actor Robert De Niro, the beloved star of *Taxi Driver* and *The Deer Hunter*;\
From actor Pedro Pascal, Hollywood’s celebrated icon of the drama genre;\
Comes the timeless re imagining, *Raging Bull*—a story of ambition, sacrifice, and redemption.

Coming soon to a theater near you.
