[
  {
    "objectID": "MP03.html",
    "href": "MP03.html",
    "title": "Political Analysis",
    "section": "",
    "text": "In this analysis, in honor of election season this year we will take a look at some trends in the political landscape of the United States. in order to do this we will need some reliable data sources on which we can base out analysis. This includes historical election results and also, some cruical shape files for visualizations. Sources include the MIT election lab as well US Census TIGER shape files.\n\n\nIn order to properly and effecently work with the data we must automate the download process, considering there a mulitple files that need to downloaded. Using a for loop and using the variable format method sprintf we can automate the download of each file dynamically accounting for i. In the second download we use if else statements to account for the changes in the URLs.\n\n\nCode\n### DATA ONE \nhouse_votes &lt;- read_csv(\"1976-2022-house (1).csv\")\n\n\nRows: 32452 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): state, state_po, office, stage, candidate, party, mode\ndbl (8): year, state_fips, state_cen, state_ic, district, candidatevotes, to...\nlgl (5): runoff, special, writein, unofficial, fusion_ticket\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\npres &lt;- read_csv(\"1976-2020-president.csv\")\n\n\nRows: 4287 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): state, state_po, office, candidate, party_detailed, party_simplified\ndbl (7): year, state_fips, state_cen, state_ic, candidatevotes, totalvotes, ...\nlgl (2): writein, notes\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n### DATA TWO CONGRESSIONAL BOUNDRIES\nlibrary(httr)\nfor (i in 94:112) {\n  BASE_URL &lt;- \"https://cdmaps.polisci.ucla.edu/shp/\"\n  zip_file &lt;- paste0(\"districts\", sprintf(\"%03d\", i), \".zip\")  # Adjusts the format to three digits\n  # Check if file exists\n  if (!file.exists(zip_file)) {\n    FILE_URL &lt;- paste0(BASE_URL, zip_file)\n    print(FILE_URL)\n    # download\n    download.file(FILE_URL, destfile = zip_file,mode = \"wb\")  # Use appropriate method if needed\n    \n  }\n}\n\n\n\n\nCode\nfor (i in 2014:2022) {\n  BASE_URL &lt;- \"https://www2.census.gov/geo/tiger/\"\n  if (i &gt;= 2018) { #### accounting for changes in the cd#\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd116.zip\")\n  } else if (i &gt; 2015) {\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd115.zip\")\n  } else {\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd114.zip\")\n  }\n  download_name &lt;- paste0(\"TIGER\",sprintf(\"%d\",i),\".zip\")\n  # Check if file exists\n  if (!file.exists(download_name)) {\n    FILE_URL &lt;- paste0(BASE_URL,file)\n    print(FILE_URL)\n    # download\n    download.file(FILE_URL, destfile = download_name,mode = \"wb\")\n  }\n}\n\n\n\n\n\nIn this task we take a look at how the number of seats change over time for the states. This is an interesting analysis as it also points to how the population of a state changes over time, from 1976 to 2022. You can see below that Texas gains the most seats, and New York lost the most amount of seats.\nIn addition to this I’ve also included a plot to show how the number of seats for each party changes across time. Interestingly, the trends in the changes of party reflect the recent election, and in some ways the shift in political climate.\n\n\nCode\nseats_won &lt;- house_votes %&gt;%\n  group_by(state, year,district) %&gt;%\n  slice_max(candidatevotes,n = 1) %&gt;% \n  select(year,state,district,party, candidate,candidatevotes)\n\n### TASK 3 PARTY CHANGES AND SEAT CHANGE \nlibrary(ggthemes)\nhouse_votes %&gt;% group_by(year,state) %&gt;% \n  mutate(num_seats = n_distinct(district)) %&gt;%#couting the seats via district\n  ungroup() %&gt;% \n  select(year,state,num_seats) %&gt;%\n  filter(year== 2022 |year ==1976) %&gt;%\n  group_by(state) %&gt;% \n  mutate(diff_seats = num_seats - lag(num_seats)) %&gt;% # subtracting the newer value from the older via lag function\n  filter(year==2022) %&gt;% # this gives up the \"lagged\" values since the older values will not have a diff via the lag method\n  distinct() %&gt;% \n  arrange(desc(abs(diff_seats))) %&gt;% #ordering by biggest differece by absoulte value\n  head(25) %&gt;% \n  #ploting above\n  ggplot(aes(x = state,y = diff_seats,fill = state))+\n  geom_bar(stat = \"identity\",width = 1)+\n  theme_clean()+\n  theme(legend.position = \"FALSE\")+\n  labs(title= \"Changes in Seats of the House of Representatives by State\", \n       x= \"State\", y = \"Change in Seats\")+\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggthemes)\n\nseats_won %&gt;% group_by(year,party) %&gt;%\n  drop_na() %&gt;% \n  mutate(party_seats = n()) %&gt;% \n  ggplot(aes(x = year,y = party_seats,color = party))+\n  scale_color_manual(\n    values= c(\"DEMOCRAT\" = \"blue\",\"REPUBLICAN\"= \"red\",\n            \"DEMOCRATIC-FARMER-LABOR\"= \"darkgreen\",\"INDEPENDENT\"=\"lightblue\"))+\n  geom_line(linewidth = 1.2)+\n  theme_minimal()+\n  theme(legend.position = \"bottom\",legend.text = element_text(size = 5))+\n  labs(title = \"Party Seats by Year \", x = \"Year\", y= \"Number of Seats \", color = \"Party\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn the state of New York, there is a fusion ticket system that allows for candidates to be put under more than one party line. This creates an interesting dynamic that allows for candidates to win even though they did not have the max number of votes in their respective parties. We see below that as a matter a fact, multiple times the candidate with the highest single party votes does not always win due to the fusion system.\n\n\nCode\nfusion &lt;- house_votes %&gt;% \n  filter(fusion_ticket == TRUE & candidate != \"BLANK\") %&gt;% \n  select(year,candidate,candidatevotes,district,party,totalvotes) %&gt;% \n  group_by(year,district,candidate) %&gt;% \n  mutate(total_fusion_votes =sum(candidatevotes)) %&gt;% \n  ungroup() %&gt;% \n  group_by(year,district) %&gt;% \n  mutate(highest_single_party_votes = candidate[which.max(candidatevotes)]) %&gt;% \n  ungroup()\n \nfusion_winners &lt;- fusion %&gt;%\n  group_by(year,district) %&gt;% \n  mutate(district_winner = candidate[which.max(total_fusion_votes)]) %&gt;%\n  select(year,district,district_winner,highest_single_party_votes) %&gt;% \n  filter(district_winner!=highest_single_party_votes) %&gt;% \n  distinct() %&gt;% \n  DT::datatable()\nfusion_winners\n\n\n\n\n\n\n\n\n\nHere we answer the question of whether or not there is a difference in votes in the congressional candidate and the presidential candidate of the same party. In this analysis I found certain cases where the congressional candidates had slightly more votes than the presidential, however the average difference across the years has actually been increasing.\n\n\nCode\nhouse_winners &lt;- house_votes %&gt;% \n  group_by(year,district,state,candidate) %&gt;% \n  mutate(cong_votes=sum(candidatevotes)) %&gt;% \n  ungroup %&gt;% group_by(year,district,state) %&gt;% \n  mutate(cong_winner = candidate[which.max(cong_votes)]) %&gt;% ungroup() %&gt;% \n  filter(cong_winner == candidate) %&gt;% \n  select(year,party,state,state_fips,district,cong_votes,cong_winner) %&gt;% \n  ungroup()\n\n \npres %&gt;% \n  inner_join(house_winners, by = c(\"state_fips\",\"party_detailed\" = \"party\",\"state\",\"year\")) %&gt;% \n  group_by(state,candidate,year,cong_winner) %&gt;% \n  mutate(vote_diff = candidatevotes - cong_votes) %&gt;% \n  ungroup() %&gt;% group_by(year) %&gt;%  \n  mutate(avg_diff = mean(vote_diff)) %&gt;% \n  select(year,state,state_fips,party_detailed,candidate,cong_winner,district,vote_diff,avg_diff) %&gt;% \n  ggplot(aes(x = year, y = avg_diff))+\n  geom_line(linewidth = 1.2, color = \"red\")+\n  theme_minimal()+\n  labs(title = \"Average Difference Between Congressional Candidate Votes & Presidential Votes\",\n       x = \"Year\", y = \"Average Difference\")\n\n\n\n\n\n\n\n\n\n\n\n\nWhen it is necessary to repeat a process over and over again it might be beneficial to create a function that is written once and can be used quickly again, or even automated. In this case we will make a function that can take any zip file, and receive its shape file. See below with a download and unzip along with a quick plot of the boroughs.\n\n\nCode\nlibrary(sf)\n\n\nWarning: package 'sf' was built under R version 4.3.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\nCode\nif(!file.exists(\"nyc_borough_boundaries.zip\")){\n    download.file(\"https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile\", \n              destfile=\"nyc_borough_boundaries.zip\")\n}\n\n##-\nunzip_shape &lt;- function(filename){\n \n  dest_dir &lt;- tempdir()\n  file &lt;- unzip(zipfile = filename,exdir = dest_dir)\n  shp_file &lt;- file[grepl(\"\\\\.shp$\",file)]\n  sf &lt;- read_sf(shp_file)\n  return(sf)\n}\n### UNZIPPIING AND PLOTTING\nnyc_sf &lt;- unzip_shape(\"nyc_borough_boundaries.zip\")\n\nggplot(nyc_sf,\n       aes(geometry=geometry,\n           fill = shape_area)) +\n    geom_sf()+\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\nUsing some of the methods previously stated and a new method I will introduce shortly we can plot the US election of 2000, which many consider to be a very controversial election.\nThis new method involves using a cowplot that allows us to ggdraw multiple different plots over each other. This will be very beneficial when plotting the US because the geographic locations of Hawaii and Alaska make a simple plot extremely ugly. This process involves filtering out the 2 states and creating a “main” plot as seen in the code below, and then plotting those 2 states separately. Once this is done we can use the ggdraw function to join them all together and tinker with the x, y, width, and height to get a nice looking plot (note: 0 is the center)\n\n\nCode\nlibrary(tools)\nbushVgore &lt;- unzip_shape(\"tl_2023_us_state.zip\")\n\n# ggplot(bushVgore, \n#        aes(geometry=geometry)) + \n#     geom_sf()\n\nbushVgore &lt;- bushVgore %&gt;% select(NAME,geometry)\n\nelection_2000 &lt;- pres %&gt;% \n  filter(year == 2000 & candidate == \"BUSH, GEORGE W.\"| candidate==\"GORE, AL\") %&gt;% \n  mutate(state = toTitleCase(tolower(state))) %&gt;% \n  select(state,state_po,candidate,candidatevotes,state_fips,totalvotes) %&gt;% \n  inner_join(bushVgore, by = c(\"state\"=\"NAME\")) %&gt;% \n  group_by(state) %&gt;% \n  mutate(state_winner = candidate[which.max(candidatevotes)])\ncolor &lt;- c(\"BUSH, GEORGE W.\" = \"red\",\"GORE, AL\"=\"blue\")\nmain_land &lt;- election_2000 %&gt;% \n  filter(!state %in% c(\"Hawaii\", \"Alaska\")) %&gt;% \n  ggplot(aes(geometry = geometry, fill = state_winner)) +\n  scale_fill_manual(values = color) + \n  geom_sf() +\n  labs(fill = \"Candidate\") + \n  geom_sf_text(aes(label = state_po), size = 1, color = \"white\",fontface = \"bold\")+\n  theme_void()\n#main_land\n\nhawaii &lt;- election_2000 %&gt;% filter(state == \"Hawaii\") %&gt;% \n  ggplot(aes(geometry = geometry,fill = state_winner))+\n  scale_fill_manual(values = color)+\n  geom_sf()+\n  labs(fill = \"Candidate\") +\n   coord_sf(crs = st_crs(4326)) +\n  theme_void()+\n  geom_sf_text(aes(label = state_po), size = 1, color = \"white\",fontface = \"bold\")+\n  theme(legend.position = \"FALSE\")\n#hawaii\n\nalaska &lt;- election_2000 %&gt;%  filter(state ==\"Alaska\") %&gt;% \n  ggplot(aes(geometry = geometry,fill = state_winner))+\n  scale_fill_manual(values = color)+\n  geom_sf()+\n  labs(fill = \"Candidate\") +\n    coord_sf(crs = st_crs(4326)) +\n  theme_void()+\n  geom_sf_text(aes(label = state_po), size = 2, color = \"white\",fontface = \"bold\")+\n  theme(legend.position = \"FALSE\")\n#alaska\n\n# library(parallel)\n# options(mc.cores = NULL)\n\nlibrary(cowplot)\n\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:ggthemes':\n\n    theme_map\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\nCode\nlibrary(gganimate)\nggdraw()+\n  draw_plot(main_land)+\n  draw_plot(hawaii, x= .1,width = 0.15, height = 0.15)+\n  draw_plot(alaska,y = -.25)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this task we can use the tmap package to create an animated plot of party changes across time. For simplicity sake I have left out the 2 states previously mentioned (my apologizes to the Alaskans and Hawaiians).\n\n\nCode\nlibrary(tools)\nparties &lt;- pres %&gt;%\n  mutate(state = toTitleCase(tolower(state))) %&gt;% \n  filter(state !=\"Hawaii\" & state != \"Alaska\" & year &gt;= 2008) %&gt;% \n  inner_join(bushVgore, by = c(\"state\"=\"NAME\")) %&gt;% #bushvgore is the shape file\n  group_by(state,year) %&gt;%\n  mutate(state_winner = party_detailed[which.max(candidatevotes)]) %&gt;%\n  ungroup()\n\n### facetmap\nlibrary(tmap)\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nCode\n###ANIMATING THE FACET\nanim &lt;- parties %&gt;% \n  filter(year &gt;= 2000) %&gt;% \n  st_as_sf() %&gt;% \n  tm_shape() +\n  tm_polygons(\"state_winner\", title = \"Party\", \n              palette = c(\"REPUBLICAN\" = \"red\", \n                          \"DEMOCRAT\" = \"blue\",\n                          \"DEMOCRATIC-FARMER-LABOR\" = \"lightblue\")) +\n  tm_facets(along = \"year\", free.coords = FALSE)+\n  tm_text(\"state_po\", size = .3, col = \"white\", fontface = \"bold\")\n \n tmap_animation(anim, delay = 50,\"anim_map.gif\")\n\n\nCreating frames\n\n\n========================================\n\n\n====================\n\n\n====================\n\n\n\nCreating animation\nAnimation saved to /Users/harry/R/Project_0/anim_map.gif \n\n\nCode\nknitr::include_graphics(\"anim_map.gif\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section we am to understand how the different methods can effect the out come of the presidential election. For this section my code is quite long so I wont go into details of each part of the code, but essentially Ive computed the winners based on each method and displayed the results in a dt::datatable(). With WTall representing Winner take all and SPW representing the State Proportional Wins we can see how the candidates differ. If we were to select a candidate based on National Candidate Votes you can see that we would have had a different president in 2000. Based on number of Winner Take all and SPW, however the results would be the same.\n\n\nCode\nECV &lt;- election_2000 %&gt;%\n  filter(candidate %in%c(\"BUSH, GEORGE W.\",\"GORE, AL\") & state !=\"District of Columbia\") %&gt;% \n  select(state,candidate,candidatevotes,totalvotes) %&gt;%\n  group_by(state) %&gt;% \n  mutate(WTall = candidate[which.max(candidatevotes)]) %&gt;% \n  mutate(bush_prop = case_when(\n      candidate == \"BUSH, GEORGE W.\" ~ candidatevotes / totalvotes,TRUE ~NA_real_),\n      gore_prop = 1-bush_prop) %&gt;%\n  ungroup() %&gt;% group_by(WTall) %&gt;% \n  mutate(national_cand_votes = sum(candidatevotes)) %&gt;% \n  ungroup() %&gt;% \n  mutate(total_national_votes = sum(candidatevotes)) %&gt;% \n  group_by(WTall) %&gt;% \n  mutate(national_prop = (national_cand_votes/total_national_votes)) %&gt;% \n  ungroup()\n\nECV &lt;- ECV %&gt;% \n  select(-candidate) %&gt;% \n  filter(!is.na(bush_prop) &!is.na(gore_prop)) %&gt;% \n  distinct(state, .keep_all = TRUE) %&gt;% \n  mutate(bush_WTall = sum(WTall == \"BUSH, GEORGE W.\"),\n         gore_WTall = sum(WTall == \"GORE, AL\")) %&gt;% \n  mutate(bush_state_prop_win = case_when(bush_prop&gt;gore_prop ~1,is.na(bush_prop) ~ NA_real_, TRUE~0)) %&gt;% \n  mutate(num_SPW_bush =case_when(bush_state_prop_win ==1 ~ sum(bush_state_prop_win ==1),TRUE~NA_real_),#state proportional wins\n         num_SPW_gore = case_when(bush_state_prop_win == 0 ~ sum(bush_state_prop_win ==0), TRUE~ NA_real_)) %&gt;% \n  select(-1,-2,-3, -bush_prop, -gore_prop, -bush_state_prop_win) %&gt;% \n  distinct(WTall,.keep_all = TRUE) %&gt;% \n  rename(cand = WTall) %&gt;%\n  DT::datatable()\nECV"
  },
  {
    "objectID": "MP03.html#set-up-and-initial-exploration",
    "href": "MP03.html#set-up-and-initial-exploration",
    "title": "Political Analysis",
    "section": "",
    "text": "In this analysis, in honor of election season this year we will take a look at some trends in the political landscape of the United States. in order to do this we will need some reliable data sources on which we can base out analysis. This includes historical election results and also, some cruical shape files for visualizations. Sources include the MIT election lab as well US Census TIGER shape files.\n\n\nIn order to properly and effecently work with the data we must automate the download process, considering there a mulitple files that need to downloaded. Using a for loop and using the variable format method sprintf we can automate the download of each file dynamically accounting for i. In the second download we use if else statements to account for the changes in the URLs.\n\n\nCode\n### DATA ONE \nhouse_votes &lt;- read_csv(\"1976-2022-house (1).csv\")\n\n\nRows: 32452 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): state, state_po, office, stage, candidate, party, mode\ndbl (8): year, state_fips, state_cen, state_ic, district, candidatevotes, to...\nlgl (5): runoff, special, writein, unofficial, fusion_ticket\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\npres &lt;- read_csv(\"1976-2020-president.csv\")\n\n\nRows: 4287 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): state, state_po, office, candidate, party_detailed, party_simplified\ndbl (7): year, state_fips, state_cen, state_ic, candidatevotes, totalvotes, ...\nlgl (2): writein, notes\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n### DATA TWO CONGRESSIONAL BOUNDRIES\nlibrary(httr)\nfor (i in 94:112) {\n  BASE_URL &lt;- \"https://cdmaps.polisci.ucla.edu/shp/\"\n  zip_file &lt;- paste0(\"districts\", sprintf(\"%03d\", i), \".zip\")  # Adjusts the format to three digits\n  # Check if file exists\n  if (!file.exists(zip_file)) {\n    FILE_URL &lt;- paste0(BASE_URL, zip_file)\n    print(FILE_URL)\n    # download\n    download.file(FILE_URL, destfile = zip_file,mode = \"wb\")  # Use appropriate method if needed\n    \n  }\n}\n\n\n\n\nCode\nfor (i in 2014:2022) {\n  BASE_URL &lt;- \"https://www2.census.gov/geo/tiger/\"\n  if (i &gt;= 2018) { #### accounting for changes in the cd#\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd116.zip\")\n  } else if (i &gt; 2015) {\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd115.zip\")\n  } else {\n    file &lt;- paste0(\"TIGER\", sprintf(\"%d\", i), \"/CD/tl_\", sprintf(\"%d\", i), \"_us_cd114.zip\")\n  }\n  download_name &lt;- paste0(\"TIGER\",sprintf(\"%d\",i),\".zip\")\n  # Check if file exists\n  if (!file.exists(download_name)) {\n    FILE_URL &lt;- paste0(BASE_URL,file)\n    print(FILE_URL)\n    # download\n    download.file(FILE_URL, destfile = download_name,mode = \"wb\")\n  }\n}\n\n\n\n\n\nIn this task we take a look at how the number of seats change over time for the states. This is an interesting analysis as it also points to how the population of a state changes over time, from 1976 to 2022. You can see below that Texas gains the most seats, and New York lost the most amount of seats.\nIn addition to this I’ve also included a plot to show how the number of seats for each party changes across time. Interestingly, the trends in the changes of party reflect the recent election, and in some ways the shift in political climate.\n\n\nCode\nseats_won &lt;- house_votes %&gt;%\n  group_by(state, year,district) %&gt;%\n  slice_max(candidatevotes,n = 1) %&gt;% \n  select(year,state,district,party, candidate,candidatevotes)\n\n### TASK 3 PARTY CHANGES AND SEAT CHANGE \nlibrary(ggthemes)\nhouse_votes %&gt;% group_by(year,state) %&gt;% \n  mutate(num_seats = n_distinct(district)) %&gt;%#couting the seats via district\n  ungroup() %&gt;% \n  select(year,state,num_seats) %&gt;%\n  filter(year== 2022 |year ==1976) %&gt;%\n  group_by(state) %&gt;% \n  mutate(diff_seats = num_seats - lag(num_seats)) %&gt;% # subtracting the newer value from the older via lag function\n  filter(year==2022) %&gt;% # this gives up the \"lagged\" values since the older values will not have a diff via the lag method\n  distinct() %&gt;% \n  arrange(desc(abs(diff_seats))) %&gt;% #ordering by biggest differece by absoulte value\n  head(25) %&gt;% \n  #ploting above\n  ggplot(aes(x = state,y = diff_seats,fill = state))+\n  geom_bar(stat = \"identity\",width = 1)+\n  theme_clean()+\n  theme(legend.position = \"FALSE\")+\n  labs(title= \"Changes in Seats of the House of Representatives by State\", \n       x= \"State\", y = \"Change in Seats\")+\n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggthemes)\n\nseats_won %&gt;% group_by(year,party) %&gt;%\n  drop_na() %&gt;% \n  mutate(party_seats = n()) %&gt;% \n  ggplot(aes(x = year,y = party_seats,color = party))+\n  scale_color_manual(\n    values= c(\"DEMOCRAT\" = \"blue\",\"REPUBLICAN\"= \"red\",\n            \"DEMOCRATIC-FARMER-LABOR\"= \"darkgreen\",\"INDEPENDENT\"=\"lightblue\"))+\n  geom_line(linewidth = 1.2)+\n  theme_minimal()+\n  theme(legend.position = \"bottom\",legend.text = element_text(size = 5))+\n  labs(title = \"Party Seats by Year \", x = \"Year\", y= \"Number of Seats \", color = \"Party\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn the state of New York, there is a fusion ticket system that allows for candidates to be put under more than one party line. This creates an interesting dynamic that allows for candidates to win even though they did not have the max number of votes in their respective parties. We see below that as a matter a fact, multiple times the candidate with the highest single party votes does not always win due to the fusion system.\n\n\nCode\nfusion &lt;- house_votes %&gt;% \n  filter(fusion_ticket == TRUE & candidate != \"BLANK\") %&gt;% \n  select(year,candidate,candidatevotes,district,party,totalvotes) %&gt;% \n  group_by(year,district,candidate) %&gt;% \n  mutate(total_fusion_votes =sum(candidatevotes)) %&gt;% \n  ungroup() %&gt;% \n  group_by(year,district) %&gt;% \n  mutate(highest_single_party_votes = candidate[which.max(candidatevotes)]) %&gt;% \n  ungroup()\n \nfusion_winners &lt;- fusion %&gt;%\n  group_by(year,district) %&gt;% \n  mutate(district_winner = candidate[which.max(total_fusion_votes)]) %&gt;%\n  select(year,district,district_winner,highest_single_party_votes) %&gt;% \n  filter(district_winner!=highest_single_party_votes) %&gt;% \n  distinct() %&gt;% \n  DT::datatable()\nfusion_winners\n\n\n\n\n\n\n\n\n\nHere we answer the question of whether or not there is a difference in votes in the congressional candidate and the presidential candidate of the same party. In this analysis I found certain cases where the congressional candidates had slightly more votes than the presidential, however the average difference across the years has actually been increasing.\n\n\nCode\nhouse_winners &lt;- house_votes %&gt;% \n  group_by(year,district,state,candidate) %&gt;% \n  mutate(cong_votes=sum(candidatevotes)) %&gt;% \n  ungroup %&gt;% group_by(year,district,state) %&gt;% \n  mutate(cong_winner = candidate[which.max(cong_votes)]) %&gt;% ungroup() %&gt;% \n  filter(cong_winner == candidate) %&gt;% \n  select(year,party,state,state_fips,district,cong_votes,cong_winner) %&gt;% \n  ungroup()\n\n \npres %&gt;% \n  inner_join(house_winners, by = c(\"state_fips\",\"party_detailed\" = \"party\",\"state\",\"year\")) %&gt;% \n  group_by(state,candidate,year,cong_winner) %&gt;% \n  mutate(vote_diff = candidatevotes - cong_votes) %&gt;% \n  ungroup() %&gt;% group_by(year) %&gt;%  \n  mutate(avg_diff = mean(vote_diff)) %&gt;% \n  select(year,state,state_fips,party_detailed,candidate,cong_winner,district,vote_diff,avg_diff) %&gt;% \n  ggplot(aes(x = year, y = avg_diff))+\n  geom_line(linewidth = 1.2, color = \"red\")+\n  theme_minimal()+\n  labs(title = \"Average Difference Between Congressional Candidate Votes & Presidential Votes\",\n       x = \"Year\", y = \"Average Difference\")\n\n\n\n\n\n\n\n\n\n\n\n\nWhen it is necessary to repeat a process over and over again it might be beneficial to create a function that is written once and can be used quickly again, or even automated. In this case we will make a function that can take any zip file, and receive its shape file. See below with a download and unzip along with a quick plot of the boroughs.\n\n\nCode\nlibrary(sf)\n\n\nWarning: package 'sf' was built under R version 4.3.3\n\n\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n\n\nCode\nif(!file.exists(\"nyc_borough_boundaries.zip\")){\n    download.file(\"https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile\", \n              destfile=\"nyc_borough_boundaries.zip\")\n}\n\n##-\nunzip_shape &lt;- function(filename){\n \n  dest_dir &lt;- tempdir()\n  file &lt;- unzip(zipfile = filename,exdir = dest_dir)\n  shp_file &lt;- file[grepl(\"\\\\.shp$\",file)]\n  sf &lt;- read_sf(shp_file)\n  return(sf)\n}\n### UNZIPPIING AND PLOTTING\nnyc_sf &lt;- unzip_shape(\"nyc_borough_boundaries.zip\")\n\nggplot(nyc_sf,\n       aes(geometry=geometry,\n           fill = shape_area)) +\n    geom_sf()+\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\n\nUsing some of the methods previously stated and a new method I will introduce shortly we can plot the US election of 2000, which many consider to be a very controversial election.\nThis new method involves using a cowplot that allows us to ggdraw multiple different plots over each other. This will be very beneficial when plotting the US because the geographic locations of Hawaii and Alaska make a simple plot extremely ugly. This process involves filtering out the 2 states and creating a “main” plot as seen in the code below, and then plotting those 2 states separately. Once this is done we can use the ggdraw function to join them all together and tinker with the x, y, width, and height to get a nice looking plot (note: 0 is the center)\n\n\nCode\nlibrary(tools)\nbushVgore &lt;- unzip_shape(\"tl_2023_us_state.zip\")\n\n# ggplot(bushVgore, \n#        aes(geometry=geometry)) + \n#     geom_sf()\n\nbushVgore &lt;- bushVgore %&gt;% select(NAME,geometry)\n\nelection_2000 &lt;- pres %&gt;% \n  filter(year == 2000 & candidate == \"BUSH, GEORGE W.\"| candidate==\"GORE, AL\") %&gt;% \n  mutate(state = toTitleCase(tolower(state))) %&gt;% \n  select(state,state_po,candidate,candidatevotes,state_fips,totalvotes) %&gt;% \n  inner_join(bushVgore, by = c(\"state\"=\"NAME\")) %&gt;% \n  group_by(state) %&gt;% \n  mutate(state_winner = candidate[which.max(candidatevotes)])\ncolor &lt;- c(\"BUSH, GEORGE W.\" = \"red\",\"GORE, AL\"=\"blue\")\nmain_land &lt;- election_2000 %&gt;% \n  filter(!state %in% c(\"Hawaii\", \"Alaska\")) %&gt;% \n  ggplot(aes(geometry = geometry, fill = state_winner)) +\n  scale_fill_manual(values = color) + \n  geom_sf() +\n  labs(fill = \"Candidate\") + \n  geom_sf_text(aes(label = state_po), size = 1, color = \"white\",fontface = \"bold\")+\n  theme_void()\n#main_land\n\nhawaii &lt;- election_2000 %&gt;% filter(state == \"Hawaii\") %&gt;% \n  ggplot(aes(geometry = geometry,fill = state_winner))+\n  scale_fill_manual(values = color)+\n  geom_sf()+\n  labs(fill = \"Candidate\") +\n   coord_sf(crs = st_crs(4326)) +\n  theme_void()+\n  geom_sf_text(aes(label = state_po), size = 1, color = \"white\",fontface = \"bold\")+\n  theme(legend.position = \"FALSE\")\n#hawaii\n\nalaska &lt;- election_2000 %&gt;%  filter(state ==\"Alaska\") %&gt;% \n  ggplot(aes(geometry = geometry,fill = state_winner))+\n  scale_fill_manual(values = color)+\n  geom_sf()+\n  labs(fill = \"Candidate\") +\n    coord_sf(crs = st_crs(4326)) +\n  theme_void()+\n  geom_sf_text(aes(label = state_po), size = 2, color = \"white\",fontface = \"bold\")+\n  theme(legend.position = \"FALSE\")\n#alaska\n\n# library(parallel)\n# options(mc.cores = NULL)\n\nlibrary(cowplot)\n\n\n\nAttaching package: 'cowplot'\n\n\nThe following object is masked from 'package:ggthemes':\n\n    theme_map\n\n\nThe following object is masked from 'package:lubridate':\n\n    stamp\n\n\nCode\nlibrary(gganimate)\nggdraw()+\n  draw_plot(main_land)+\n  draw_plot(hawaii, x= .1,width = 0.15, height = 0.15)+\n  draw_plot(alaska,y = -.25)\n\n\n\n\n\n\n\n\n\n\n\n\nIn this task we can use the tmap package to create an animated plot of party changes across time. For simplicity sake I have left out the 2 states previously mentioned (my apologizes to the Alaskans and Hawaiians).\n\n\nCode\nlibrary(tools)\nparties &lt;- pres %&gt;%\n  mutate(state = toTitleCase(tolower(state))) %&gt;% \n  filter(state !=\"Hawaii\" & state != \"Alaska\" & year &gt;= 2008) %&gt;% \n  inner_join(bushVgore, by = c(\"state\"=\"NAME\")) %&gt;% #bushvgore is the shape file\n  group_by(state,year) %&gt;%\n  mutate(state_winner = party_detailed[which.max(candidatevotes)]) %&gt;%\n  ungroup()\n\n### facetmap\nlibrary(tmap)\ntmap_mode(\"plot\")\n\n\ntmap mode set to plotting\n\n\nCode\n###ANIMATING THE FACET\nanim &lt;- parties %&gt;% \n  filter(year &gt;= 2000) %&gt;% \n  st_as_sf() %&gt;% \n  tm_shape() +\n  tm_polygons(\"state_winner\", title = \"Party\", \n              palette = c(\"REPUBLICAN\" = \"red\", \n                          \"DEMOCRAT\" = \"blue\",\n                          \"DEMOCRATIC-FARMER-LABOR\" = \"lightblue\")) +\n  tm_facets(along = \"year\", free.coords = FALSE)+\n  tm_text(\"state_po\", size = .3, col = \"white\", fontface = \"bold\")\n \n tmap_animation(anim, delay = 50,\"anim_map.gif\")\n\n\nCreating frames\n\n\n========================================\n\n\n====================\n\n\n====================\n\n\n\nCreating animation\nAnimation saved to /Users/harry/R/Project_0/anim_map.gif \n\n\nCode\nknitr::include_graphics(\"anim_map.gif\")\n\n\n\n\n\n\n\n\n\n\n\n\nIn this section we am to understand how the different methods can effect the out come of the presidential election. For this section my code is quite long so I wont go into details of each part of the code, but essentially Ive computed the winners based on each method and displayed the results in a dt::datatable(). With WTall representing Winner take all and SPW representing the State Proportional Wins we can see how the candidates differ. If we were to select a candidate based on National Candidate Votes you can see that we would have had a different president in 2000. Based on number of Winner Take all and SPW, however the results would be the same.\n\n\nCode\nECV &lt;- election_2000 %&gt;%\n  filter(candidate %in%c(\"BUSH, GEORGE W.\",\"GORE, AL\") & state !=\"District of Columbia\") %&gt;% \n  select(state,candidate,candidatevotes,totalvotes) %&gt;%\n  group_by(state) %&gt;% \n  mutate(WTall = candidate[which.max(candidatevotes)]) %&gt;% \n  mutate(bush_prop = case_when(\n      candidate == \"BUSH, GEORGE W.\" ~ candidatevotes / totalvotes,TRUE ~NA_real_),\n      gore_prop = 1-bush_prop) %&gt;%\n  ungroup() %&gt;% group_by(WTall) %&gt;% \n  mutate(national_cand_votes = sum(candidatevotes)) %&gt;% \n  ungroup() %&gt;% \n  mutate(total_national_votes = sum(candidatevotes)) %&gt;% \n  group_by(WTall) %&gt;% \n  mutate(national_prop = (national_cand_votes/total_national_votes)) %&gt;% \n  ungroup()\n\nECV &lt;- ECV %&gt;% \n  select(-candidate) %&gt;% \n  filter(!is.na(bush_prop) &!is.na(gore_prop)) %&gt;% \n  distinct(state, .keep_all = TRUE) %&gt;% \n  mutate(bush_WTall = sum(WTall == \"BUSH, GEORGE W.\"),\n         gore_WTall = sum(WTall == \"GORE, AL\")) %&gt;% \n  mutate(bush_state_prop_win = case_when(bush_prop&gt;gore_prop ~1,is.na(bush_prop) ~ NA_real_, TRUE~0)) %&gt;% \n  mutate(num_SPW_bush =case_when(bush_state_prop_win ==1 ~ sum(bush_state_prop_win ==1),TRUE~NA_real_),#state proportional wins\n         num_SPW_gore = case_when(bush_state_prop_win == 0 ~ sum(bush_state_prop_win ==0), TRUE~ NA_real_)) %&gt;% \n  select(-1,-2,-3, -bush_prop, -gore_prop, -bush_state_prop_win) %&gt;% \n  distinct(WTall,.keep_all = TRUE) %&gt;% \n  rename(cand = WTall) %&gt;%\n  DT::datatable()\nECV"
  }
]