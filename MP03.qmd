---
title: "Political Analysis"
author: "Harry Sohal"
editor: visual
code-fold: true
cache: true
---

## **Set-Up and Initial Exploration**

In this analysis, in honor of election season this year we will take a look at some trends in the political landscape of the United States. in order to do this we will need some reliable data sources on which we can base out analysis. This includes historical election results and also, some cruical shape files for visualizations. Sources include the MIT election lab as well US Census TIGER shape files.

### Task 1 & 2

In order to properly and effecently work with the data we must automate the download process, considering there a mulitple files that need to downloaded. Using a for loop and using the variable format method `sprintf` we can automate the download of each file dynamically accounting for i. In the second download we use if else statements to account for the changes in the URLs.

```{r setup libs, include=FALSE}
library(dplyr)
library(tidyr)
library(tidyverse)
library(stringr)
setwd("~/R/Project_0/")
```

```{r  download 1,results = "hide"}
### DATA ONE 
house_votes <- read_csv("1976-2022-house (1).csv")
pres <- read_csv("1976-2020-president.csv")

### DATA TWO CONGRESSIONAL BOUNDRIES
library(httr)
for (i in 94:112) {
  BASE_URL <- "https://cdmaps.polisci.ucla.edu/shp/"
  zip_file <- paste0("districts", sprintf("%03d", i), ".zip")  # Adjusts the format to three digits
  # Check if file exists
  if (!file.exists(zip_file)) {
    FILE_URL <- paste0(BASE_URL, zip_file)
    print(FILE_URL)
    # download
    download.file(FILE_URL, destfile = zip_file,mode = "wb")  # Use appropriate method if needed
    
  }
}
```

```{r download 2 }

for (i in 2014:2022) {
  BASE_URL <- "https://www2.census.gov/geo/tiger/"
  if (i >= 2018) { #### accounting for changes in the cd#
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd116.zip")
  } else if (i > 2015) {
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd115.zip")
  } else {
    file <- paste0("TIGER", sprintf("%d", i), "/CD/tl_", sprintf("%d", i), "_us_cd114.zip")
  }
  download_name <- paste0("TIGER",sprintf("%d",i),".zip")
  # Check if file exists
  if (!file.exists(download_name)) {
    FILE_URL <- paste0(BASE_URL,file)
    print(FILE_URL)
    # download
    download.file(FILE_URL, destfile = download_name,mode = "wb")
  }
}
```

### TASK 3: Party & Seat Changes

In this task we take a look at how the number of seats change over time for the states. This is an interesting analysis as it also points to how the population of a state changes over time, from 1976 to 2022. You can see below that Texas gains the most seats, and New York lost the most amount of seats.

In addition to this I've also included a plot to show how the number of seats for each party changes across time. Interestingly, the trends in the changes of party reflect the recent election, and in some ways the shift in political climate.

```{r task 3}
seats_won <- house_votes %>%
  group_by(state, year,district) %>%
  slice_max(candidatevotes,n = 1) %>% 
  select(year,state,district,party, candidate,candidatevotes)

### TASK 3 PARTY CHANGES AND SEAT CHANGE 
library(ggthemes)
house_votes %>% group_by(year,state) %>% 
  mutate(num_seats = n_distinct(district)) %>%#couting the seats via district
  ungroup() %>% 
  select(year,state,num_seats) %>%
  filter(year== 2022 |year ==1976) %>%
  group_by(state) %>% 
  mutate(diff_seats = num_seats - lag(num_seats)) %>% # subtracting the newer value from the older via lag function
  filter(year==2022) %>% # this gives up the "lagged" values since the older values will not have a diff via the lag method
  distinct() %>% 
  arrange(desc(abs(diff_seats))) %>% #ordering by biggest differece by absoulte value
  head(25) %>% 
  #ploting above
  ggplot(aes(x = state,y = diff_seats,fill = state))+
  geom_bar(stat = "identity",width = 1)+
  theme_clean()+
  theme(legend.position = "FALSE")+
  labs(title= "Changes in Seats of the House of Representatives by State", 
       x= "State", y = "Change in Seats")+
  coord_flip()
```

```{r party changes task 3}
library(ggthemes)

seats_won %>% group_by(year,party) %>%
  drop_na() %>% 
  mutate(party_seats = n()) %>% 
  ggplot(aes(x = year,y = party_seats,color = party))+
  scale_color_manual(
    values= c("DEMOCRAT" = "blue","REPUBLICAN"= "red",
            "DEMOCRATIC-FARMER-LABOR"= "darkgreen","INDEPENDENT"="lightblue"))+
  geom_line(linewidth = 1.2)+
  theme_minimal()+
  theme(legend.position = "bottom",legend.text = element_text(size = 5))+
  labs(title = "Party Seats by Year ", x = "Year", y= "Number of Seats ", color = "Party")
```

### Fusion Fusses

In the state of New York, there is a fusion ticket system that allows for candidates to be put under more than one party line. This creates an interesting dynamic that allows for candidates to win even though they did not have the max number of votes in their respective parties. We see below that as a matter a fact, multiple times the candidate with the highest single party votes does not always win due to the fusion system.

```{r fusions}
fusion <- house_votes %>% 
  filter(fusion_ticket == TRUE & candidate != "BLANK") %>% 
  select(year,candidate,candidatevotes,district,party,totalvotes) %>% 
  group_by(year,district,candidate) %>% 
  mutate(total_fusion_votes =sum(candidatevotes)) %>% 
  ungroup() %>% 
  group_by(year,district) %>% 
  mutate(highest_single_party_votes = candidate[which.max(candidatevotes)]) %>% 
  ungroup()
 
fusion_winners <- fusion %>%
  group_by(year,district) %>% 
  mutate(district_winner = candidate[which.max(total_fusion_votes)]) %>%
  select(year,district,district_winner,highest_single_party_votes) %>% 
  filter(district_winner!=highest_single_party_votes) %>% 
  distinct() %>% 
  DT::datatable()
fusion_winners
```

### Congressional vs Presidential

Here we answer the question of whether or not there is a difference in votes in the congressional candidate and the presidential candidate of the same party. In this analysis I found certain cases where the congressional candidates had slightly more votes than the presidential, however the average difference across the years has actually been increasing.

```{r cong vs pres, warning=FALSE}
house_winners <- house_votes %>% 
  group_by(year,district,state,candidate) %>% 
  mutate(cong_votes=sum(candidatevotes)) %>% 
  ungroup %>% group_by(year,district,state) %>% 
  mutate(cong_winner = candidate[which.max(cong_votes)]) %>% ungroup() %>% 
  filter(cong_winner == candidate) %>% 
  select(year,party,state,state_fips,district,cong_votes,cong_winner) %>% 
  ungroup()

 
pres %>% 
  inner_join(house_winners, by = c("state_fips","party_detailed" = "party","state","year")) %>% 
  group_by(state,candidate,year,cong_winner) %>% 
  mutate(vote_diff = candidatevotes - cong_votes) %>% 
  ungroup() %>% group_by(year) %>%  
  mutate(avg_diff = mean(vote_diff)) %>% 
  select(year,state,state_fips,party_detailed,candidate,cong_winner,district,vote_diff,avg_diff) %>% 
  ggplot(aes(x = year, y = avg_diff))+
  geom_line(linewidth = 1.2, color = "red")+
  theme_minimal()+
  labs(title = "Average Difference Between Congressional Candidate Votes & Presidential Votes",
       x = "Year", y = "Average Difference")
```

### Task 4: Unzip Function

When it is necessary to repeat a process over and over again it might be beneficial to create a function that is written once and can be used quickly again, or even automated. In this case we will make a function that can take any zip file, and receive its shape file. See below with a download and unzip along with a quick plot of the boroughs.

```{r shape zip}

library(sf)

if(!file.exists("nyc_borough_boundaries.zip")){
    download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile", 
              destfile="nyc_borough_boundaries.zip")
}

##-
unzip_shape <- function(filename){
 
  dest_dir <- tempdir()
  file <- unzip(zipfile = filename,exdir = dest_dir)
  shp_file <- file[grepl("\\.shp$",file)]
  sf <- read_sf(shp_file)
  return(sf)
}
### UNZIPPIING AND PLOTTING
nyc_sf <- unzip_shape("nyc_borough_boundaries.zip")

ggplot(nyc_sf,
       aes(geometry=geometry,
           fill = shape_area)) +
    geom_sf()+
  theme_void()


```

### Task 5: Revisiting Bush vs Gore, 2000

Using some of the methods previously stated and a new method I will introduce shortly we can plot the US election of 2000, which many consider to be a very controversial election.

This new method involves using a `cowplot` that allows us to `ggdraw` multiple different plots over each other. This will be very beneficial when plotting the US because the geographic locations of Hawaii and Alaska make a simple plot extremely ugly. This process involves filtering out the 2 states and creating a "main" plot as seen in the code below, and then plotting those 2 states separately. Once this is done we can use the `ggdraw` function to join them all together and tinker with the x, y, width, and height to get a nice looking plot (note: 0 is the center)

```{r bush vs gore, warning= FALSE}
library(tools)
bushVgore <- unzip_shape("tl_2023_us_state.zip")

# ggplot(bushVgore, 
#        aes(geometry=geometry)) + 
#     geom_sf()

bushVgore <- bushVgore %>% select(NAME,geometry)

election_2000 <- pres %>% 
  filter(year == 2000 & candidate == "BUSH, GEORGE W."| candidate=="GORE, AL") %>% 
  mutate(state = toTitleCase(tolower(state))) %>% 
  select(state,state_po,candidate,candidatevotes,state_fips,totalvotes) %>% 
  inner_join(bushVgore, by = c("state"="NAME")) %>% 
  group_by(state) %>% 
  mutate(state_winner = candidate[which.max(candidatevotes)])
color <- c("BUSH, GEORGE W." = "red","GORE, AL"="blue")
main_land <- election_2000 %>% 
  filter(!state %in% c("Hawaii", "Alaska")) %>% 
  ggplot(aes(geometry = geometry, fill = state_winner)) +
  scale_fill_manual(values = color) + 
  geom_sf() +
  labs(fill = "Candidate") + 
  geom_sf_text(aes(label = state_po), size = 1, color = "white",fontface = "bold")+
  theme_void()
#main_land

hawaii <- election_2000 %>% filter(state == "Hawaii") %>% 
  ggplot(aes(geometry = geometry,fill = state_winner))+
  scale_fill_manual(values = color)+
  geom_sf()+
  labs(fill = "Candidate") +
   coord_sf(crs = st_crs(4326)) +
  theme_void()+
  geom_sf_text(aes(label = state_po), size = 1, color = "white",fontface = "bold")+
  theme(legend.position = "FALSE")
#hawaii

alaska <- election_2000 %>%  filter(state =="Alaska") %>% 
  ggplot(aes(geometry = geometry,fill = state_winner))+
  scale_fill_manual(values = color)+
  geom_sf()+
  labs(fill = "Candidate") +
    coord_sf(crs = st_crs(4326)) +
  theme_void()+
  geom_sf_text(aes(label = state_po), size = 2, color = "white",fontface = "bold")+
  theme(legend.position = "FALSE")
#alaska

# library(parallel)
# options(mc.cores = NULL)

library(cowplot)
library(gganimate)
ggdraw()+
  draw_plot(main_land)+
  draw_plot(hawaii, x= .1,width = 0.15, height = 0.15)+
  draw_plot(alaska,y = -.25)

```

### Task 6: Animating Party Changes in States During Presidential Elections

In this task we can use the `tmap` package to create an animated plot of party changes across time. For simplicity sake I have left out the 2 states previously mentioned (my apologizes to the Alaskans and Hawaiians).

```{r animated plot}
library(tools)
parties <- pres %>%
  mutate(state = toTitleCase(tolower(state))) %>% 
  filter(state !="Hawaii" & state != "Alaska" & year >= 2008) %>% 
  inner_join(bushVgore, by = c("state"="NAME")) %>% #bushvgore is the shape file
  group_by(state,year) %>%
  mutate(state_winner = party_detailed[which.max(candidatevotes)]) %>%
  ungroup()

### facetmap
library(tmap)
tmap_mode("plot")
###ANIMATING THE FACET
anim <- parties %>% 
  filter(year >= 2000) %>% 
  st_as_sf() %>% 
  tm_shape() +
  tm_polygons("state_winner", title = "Party", 
              palette = c("REPUBLICAN" = "red", 
                          "DEMOCRAT" = "blue",
                          "DEMOCRATIC-FARMER-LABOR" = "lightblue")) +
  tm_facets(along = "year", free.coords = FALSE)+
  tm_text("state_po", size = .3, col = "white", fontface = "bold")
 
 tmap_animation(anim, delay = 50,"anim_map.gif")
knitr::include_graphics("anim_map.gif")
```

### Task 7: Electoral Method Analysis

In this section we am to understand how the different methods can effect the out come of the presidential election. For this section my code is quite long so I wont go into details of each part of the code, but essentially Ive computed the winners based on each method and displayed the results in a `dt::datatable()`. With WTall representing Winner take all and SPW representing the State Proportional Wins we can see how the candidates differ. If we were to select a candidate based on National Candidate Votes you can see that we would have had a different president in 2000. Based on number of Winner Take all and SPW, however the results would be the same.

```{r ECV}
ECV <- election_2000 %>%
  filter(candidate %in%c("BUSH, GEORGE W.","GORE, AL") & state !="District of Columbia") %>% 
  select(state,candidate,candidatevotes,totalvotes) %>%
  group_by(state) %>% 
  mutate(WTall = candidate[which.max(candidatevotes)]) %>% 
  mutate(bush_prop = case_when(
      candidate == "BUSH, GEORGE W." ~ candidatevotes / totalvotes,TRUE ~NA_real_),
      gore_prop = 1-bush_prop) %>%
  ungroup() %>% group_by(WTall) %>% 
  mutate(national_cand_votes = sum(candidatevotes)) %>% 
  ungroup() %>% 
  mutate(total_national_votes = sum(candidatevotes)) %>% 
  group_by(WTall) %>% 
  mutate(national_prop = (national_cand_votes/total_national_votes)) %>% 
  ungroup()

ECV <- ECV %>% 
  select(-candidate) %>% 
  filter(!is.na(bush_prop) &!is.na(gore_prop)) %>% 
  distinct(state, .keep_all = TRUE) %>% 
  mutate(bush_WTall = sum(WTall == "BUSH, GEORGE W."),
         gore_WTall = sum(WTall == "GORE, AL")) %>% 
  mutate(bush_state_prop_win = case_when(bush_prop>gore_prop ~1,is.na(bush_prop) ~ NA_real_, TRUE~0)) %>% 
  mutate(num_SPW_bush =case_when(bush_state_prop_win ==1 ~ sum(bush_state_prop_win ==1),TRUE~NA_real_),#state proportional wins
         num_SPW_gore = case_when(bush_state_prop_win == 0 ~ sum(bush_state_prop_win ==0), TRUE~ NA_real_)) %>% 
  select(-1,-2,-3, -bush_prop, -gore_prop, -bush_state_prop_win) %>% 
  distinct(WTall,.keep_all = TRUE) %>% 
  rename(cand = WTall) %>%
  DT::datatable()
ECV
```
