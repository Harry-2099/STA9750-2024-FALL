---
title: "Mini Project 1"
author: "Harry Sohal"
editor: visual
---

# Fiscal Analysis of Transit Systems

------------------------------------------------------------------------

## Intro

This analysis looks to provide some insights on the financial information behind some of the biggest transit agencies in the US. The data set being studied includes massive systems like the NYC Metro and also lesser used systems in states like Hawaii and Oklahoma.

```{r}
#| echo: false
#| include: false
if(!require("tidyverse")) install.packages("tidyverse")

# Let's start with Fare Revenue
library(tidyverse)

  FARES <- readxl::read_xlsx("2022_fare_revenue.xlsx") |>
  select(-`State/Parent NTD ID`, 
         -`Reporter Type`,
         -`Reporting Module`,
         -`TOS`,
         -`Passenger Paid Fares`,
         -`Organization Paid Fares`) |>
  filter(`Expense Type` == "Funds Earned During Period") |>
  select(-`Expense Type`) |>
  group_by(`NTD ID`,       # Sum over different `TOS` for the same `Mode`
           `Agency Name`,  # These are direct operated and sub-contracted 
           `Mode`) |>      # of the same transit modality
  # Not a big effect in most munis (significant DO
  # tends to get rid of sub-contractors), but we'll sum
  # to unify different passenger experiences
  summarize(`Total Fares` = sum(`Total Fares`)) |>
  ungroup()

# Next, expenses
if(!file.exists("2022_expenses.csv")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "2022_expenses.csv" in your project
  # directory.
  download.file("https://data.transportation.gov/api/views/dkxx-zjd6/rows.csv?date=20231102&accessType=DOWNLOAD&bom=true&format=true", 
                destfile="2022_expenses.csv", 
                quiet=FALSE)
}
EXPENSES <- readr::read_csv("2022_expenses.csv") |>
  select(`NTD ID`, 
         `Agency`,
         `Total`, 
         `Mode`) |>
  mutate(`NTD ID` = as.integer(`NTD ID`)) |>
  rename(Expenses = Total) |>
  group_by(`NTD ID`, `Mode`) |>
  summarize(Expenses = sum(Expenses)) |>
  ungroup()

Financials <- inner_join(FARES, EXPENSES, join_by(`NTD ID`, `Mode`))

# Monthly Transit Numbers
library(tidyverse)
if(!file.exists("ridership.xlsx")){
  # This should work _in theory_ but in practice it's still a bit finicky
  # If it doesn't work for you, download this file 'by hand' in your
  # browser and save it as "ridership.xlsx" in your project
  # directory.
  download.file("https://www.transit.dot.gov/sites/fta.dot.gov/files/2024-09/July%202024%20Complete%20Monthly%20Ridership%20%28with%20adjustments%20and%20estimates%29_240903.xlsx", 
                destfile="ridership.xlsx", 
                quiet=FALSE,
                method= "curl")}

TRIPS <- readxl::read_xlsx("ridership.xlsx", sheet="UPT") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`), 
               names_to="month", 
               values_to="UPT") |>
  drop_na() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs
MILES <- readxl::read_xlsx("ridership.xlsx", sheet="VRM") |>
  filter(`Mode/Type of Service Status` == "Active") |>
  select(-`Legacy NTD ID`, 
         -`Reporter Type`, 
         -`Mode/Type of Service Status`, 
         -`UACE CD`, 
         -`TOS`) |>
  pivot_longer(-c(`NTD ID`:`3 Mode`), 
               names_to="month", 
               values_to="VRM") |>
  drop_na() |>
  group_by(`NTD ID`, `Agency`, `UZA Name`, 
           `Mode`, `3 Mode`, month) |>
  summarize(VRM = sum(VRM)) |>
  ungroup() |>
  mutate(month=my(month)) # Parse _m_onth _y_ear date specs

```

## Task One & Two: Data Cleaning

After loading the data certain column names and row values need to be changed for syntactic reasons and ease of understanding. Firstly, changing the column UZA Name to metro_area will allow for syntactic ease, and a more intuitive label.

```{r}
#|echo: true
#|include: false

USAGE <- inner_join(TRIPS, MILES) |>
    mutate(`NTD ID` = as.integer(`NTD ID`))
    sample_n(USAGE, 1000) |> 
    rename("metro_area" = "UZA Name") %>% #renaming UZA
    mutate(month=as.character(month))
```

The second section will be "re-coding" the Mode date in the dataframe. Since the data originally had codes like "HR" for Heavy Rail, or "FB" for Ferry Boat it will be hard for someone ignorant of these codes to understand the meaning behind them. So we will find all the distinct values, search their meanings, and then rename those values. The results will be displayed a Data Table using the DT library

```{r}

  distinct_modes<- USAGE %>% distinct(Mode)
 
   USAGE <- USAGE |>
     mutate(Mode=case_when(
          Mode == "HR" ~ "Heavy Rail", 
          Mode == "DR"~"Demand Response",
          Mode == "FB"~"Ferryboat",
          Mode == "MB"~"Bus",
          Mode == "SR"~"Streetcar Rail",
          Mode == "TB"~"Trolleybus",
          Mode == "VP"~"Vanpool",
          Mode == "CB"~"Commuter Bus",
          Mode == "RB"~"Bus Rapid Transit",
          Mode == "LR"~"Light Rail",
          Mode == "YR"~"Hybrid Rail",
          Mode == "MG"~"Monorail Automated Guideway",
          Mode == "CR"~"Commuter Rail",
          Mode == "AR"~"Alaska Railroad",
          Mode == "TR"~"Aerial Tramway",
          Mode == "IP"~"Inclined Plane",
          Mode == "PB"~"Publico",
          Mode == "CC"~"Cable Car",
          TRUE~"Unknown"))
    Use_table <- DT::datatable(USAGE)

```

```{r}
#| echo: false

 Use_table
```

## Task 3: Answering Questions Using dyplr

#### What transit agency had the most total VRM in our data set?

Using the arrange function we can sort the data based on a ascending or descending order of a specified value. Using arrange combined with desc function we get the all the VRM values starting from highest to lowest. The corresponding agency will be the answer.

```{r}
Max_VRM <- USAGE %>% 
    select(VRM,Agency) %>%
    arrange(desc(VRM)) %>% 
    head(1)
    print(Max_VRM)
```

#### What transit mode had the most total VRM in our data set?

Using the same idea as the previous question, this time combining it with the group_by function will allow us to find the answer. The group_by function creates "groups" of a given variable to then perform some action to those groups. In this case we will group by the mode and then sum up the VRM for each mode. This method will provide the answer "Bus"

```{r}
vrm_by_mode <- USAGE %>% 
    select(VRM,Mode) %>%
    group_by(Mode) %>% 
    summarise(Total = sum(VRM)) %>% 
    arrange(desc(Total))
    print(vrm_by_mode)
```

#### How many trips were taken on the NYC Subway (Heavy Rail) in May 2024?

To answer this the use of the filter function is required. The filter function will remove all the data that doesn't agree with the filter statement, allowing for more specific analysis. Filtering for a May 2024 date and a NYC MTA Agency Subway will give the answer, but first some data manipulating is required. Creating a year and month column with the lubridate library, allows for quick and easy date time analysis and will come in handy, making future analysis streamlined. After doing so the previous techniques are used.

```{r}
  typeof(USAGE$month)#checking the type of column month is

library(lubridate)
  USAGE$month <- ymd(USAGE$month) #changing to date format
  USAGE <- USAGE %>% 
     rename("trips"=UPT) %>% #renaming the UPT(Unlinked passenger trips)- to trips
     rename("date"=month) %>%  
     mutate("year"= year(date)) %>%
     mutate('month'= month(date))
  nyc_trips <- USAGE %>% 
    filter(Agency == "MTA New York City Transit" & Mode =="Heavy Rail")%>% 
    filter(year==2024 & month == 5) %>% 
    summarise(may_total=sum(trips))
    print(nyc_trips)
```

#### How much did NYC subway ridership fall between April 2019 and April 2020?

Using all the techniques from the previous questions, along with the pull method to give a singular value will provide an answer for this question. After pulling the data for both cases we can simply find the difference.

```{r}
  nyc_monthly <- USAGE %>% #this table provides info that might be useful later on
    filter(Agency == 'MTA New York City Transit' & Mode == 'Heavy Rail') %>% 
    group_by(year, month) %>%                       
    mutate(total_vrm = sum(VRM)) %>% 
    mutate(total_trips = sum(trips)) %>%
    select(year,month,total_trips,total_vrm)
   vrm_2019 <- nyc_monthly %>%
    filter(year == 2019 & month == 4) %>% 
    pull(total_vrm)
  
  vrm_2020 <- nyc_monthly %>%
    filter(year == 2020 & month == 4) %>% 
    pull(total_vrm)
  
  print("VRM Difference")
  vrm_2019-vrm_2020 #difference in Vehicle Revenue Miles
  
  trips_2019 <- nyc_monthly %>%
    filter(year == 2019 & month == 4) %>% 
    pull(total_trips)
  
  trips_2020 <- nyc_monthly %>%
    filter(year == 2020 & month == 4) %>% 
    pull(total_trips)
  print("Trips Difference")
  trips_2019-trips_2020 #decrease in trips
```

###  Task 4:

#### What month had the highest VRM in 2023

Using a combintion of techniques like filtering, summarize, as well as grouping by the month column will provide the answer.

```{r}
     USAGE %>% 
     filter(year == 2023) %>% 
     select(year,month,VRM) %>% 
     group_by(month) %>% 
     summarise(total_vrm = sum(VRM)) %>% 
     arrange(desc(total_vrm))
```

#### What year had the most trips?

Similarly with this question grouping by year and computing the desired value, using mutate this time, gives us the answer. We can also plot this to see some yearly trends using ggplot.

```{r}
  yearly_trips <- USAGE %>% 
     group_by(year) %>% 
     mutate(total_trips = sum(trips)) %>%
     mutate(avg_trip_day = total_trips/365) %>% 
     select(year,total_trips,avg_trip_day) %>% 
     arrange(desc(total_trips)) %>% 
     distinct(year,total_trips,avg_trip_day)
     #plotting
     ggplot(yearly_trips,aes(x= year,y=avg_trip_day))+
       geom_line(color = 'blue')+
       labs(title = "Trends in Avg Trips Per Day", y = "Unlinked Trips",x = "Years")+
       theme_minimal()
```

Predictably, there is a huge drop in 2020 in average trips.

#### What area has the highest/lowest trips, excluding the NYC area? 

To answer this we can group by metro area and then summarize for the mean of area. After generating a dataframe with these values we can see Chicago was the highest followed by Las Vegas area, and the lowest was Cheyenne,WY. We can also create a bar graph of the top 10 areas to visualize this clearly. Using the aes (aesthetic) function with fill = metro_area allows for a colorful representation of each chart. This method creates a legend we don't need so we set show.legend = FALSE. The element text function allows for the X label to be angled and positioned correctly for long label names.

```{r}
 trips_by_area <- USAGE %>% 
        select(year,metro_area,trips) %>% 
        group_by(metro_area) %>% 
        summarise(avg_trips = mean(trips)) %>% 
        arrange(desc(avg_trips)) %>% 
        head(10)

        ggplot(trips_by_area,aes(x = metro_area,y = avg_trips))+
        geom_bar(stat = 'identity',aes(fill = metro_area),color = "red",show.legend = FALSE)+
          theme_minimal()+
          theme(axis.text.x = element_text(angle = 45, hjust = 1,vjust = 1))+
          labs(title = "Average Trips by City",y= "Unlinked Passenger Trips", x= "Metro Area")
```

### Task 5: Table Summarization

This task pertains to joining two tables to create a Usage and financial table. We will join on the keys NTD ID and Mode. Since the mode is different in the financial table (recall it was altered for usability) it must also be changed. Grouping by NTD ID and Mode allows for us answer the questions in Task 6 which requires transportation agency and method to be combined, since each agency has its own unique ID this is exactly the same thing.

```{r}
  USAGE_2022_ANNUAL <- USAGE %>% 
        filter(year == 2022) %>% 
        select('NTD ID',Mode,Agency,metro_area,trips,VRM) %>% 
        group_by(`NTD ID`,Mode) %>% 
        summarise(annual_trips = sum(trips),annual_vrm = sum(VRM)) %>% 
        ungroup()
        
      Financials <- Financials |>
     mutate(Mode=case_when(
          Mode == "HR" ~ "Heavy Rail", 
          Mode == "DR"~"Demand Response",
          Mode == "FB"~"Ferryboat",
          Mode == "MB"~"Bus",
          Mode == "SR"~"Streetcar Rail",
          Mode == "TB"~"Trolleybus",
          Mode == "VP"~"Vanpool",
          Mode == "CB"~"Commuter Bus",
          Mode == "RB"~"Bus Rapid Transit",
          Mode == "LR"~"Light Rail",
          Mode == "YR"~"Hybrid Rail",
          Mode == "MG"~"Monorail Automated Guideway",
          Mode == "CR"~"Commuter Rail",
          Mode == "AR"~"Alaska Railroad",
          Mode == "TR"~"Aerial Tramway",
          Mode == "IP"~"Inclined Plane",
          Mode == "PB"~"Publico",
          Mode == "CC"~"Cable Car",
          TRUE~"Unknown"))
      
      USAGE_AND_FINANCIALS <- left_join(USAGE_2022_ANNUAL, 
           Financials, 
           join_by(`NTD ID`, Mode)) |>
           drop_na()
```

### Task 6: Farebox Recovery Among Major Systems

#### Which transit system (agency and mode) had the most UPT in 2022?

Using Group_by and summarize with max( ) we get the answer New York MTA and Heavy Rail.

```{r}
#| message: false
      USAGE_AND_FINANCIALS %>% 
        group_by(`Agency Name`,`Mode`) %>% 
        summarise(max_trips = max(annual_trips)) %>% 
        arrange(desc(max_trips)) %>% 
        head(1)
```

#### Which transit system (agency and mode) had the highest fare-box recovery(Ratio of Total Fares to Expenses)?

Using mutate to create another calculated column with the Fare Box Ratio formula we get the answer, Vanpool in the Central Kentucky agency. This makes sense as vanpool is essentially car pooling in small vehicles like vans and small buses for shorter distances. This allows for lower costs then other modes like for example Heavy Rail, which require lots of maintenance and overhead.

```{r}
      USAGE_AND_FINANCIALS<-USAGE_AND_FINANCIALS %>% 
         group_by(`Agency Name`,`Mode`) %>% 
         mutate(fare_box_recovery = `Total Fares`/Expenses) %>%
         arrange(desc(fare_box_recovery))
         print(USAGE_AND_FINANCIALS)
```

#### Which transit system (agency and mode) has the lowest expenses per UPT?

Similarly we can answer this question.

```{r}
       USAGE_AND_FINANCIALS %>% 
           group_by(`Agency Name`,`Mode`) %>% 
           mutate(expenses_per_trip = Expenses/annual_trips) %>% 
           select(`Agency Name`,Mode,expenses_per_trip) %>% 
           arrange(expenses_per_trip)
```

Indicates that buses have a low cost per person.

#### Which transit system (agency and mode) has the highest total fares per UPT?

In this question, an extra step will be taken for later use to both easily answer more questions and also effectively produce some visualizations based on the given problems. Firstly, using mutate to calculate Fares/ UPT(Trips) grouped by the agency and mode will be enough to answer the question. The second additional step will be to make a new column that contains both the agency and the mode in one column. This will make it easier to get this information, and also will allow use to graph these grouped problems. To do this the use of the *stringr* library. This library is used for manipulating strings, and in this case it will be used to combine the 2 strings in both agent and mode columns.

```{r}
library(stringr)
       fare_per_trip <- USAGE_AND_FINANCIALS %>% 
           group_by(`Agency Name`,`Mode`) %>% 
           mutate(fares_per_trip = `Total Fares`/annual_trips) %>% 
           mutate(Agent_Mode = str_c(`Agency Name`,Mode, sep = ", ")) %>% #joining the col strings with a comma and space
           arrange(desc(fares_per_trip)) %>% 
           select(`Agency Name`,fares_per_trip,Mode,Agent_Mode) %>%
           head(10)
       print(fare_per_trip)
```

*With the new column, removing agent and mode columns.*

```{r}
  
  fare_per_trip %>% 
     ungroup() %>% 
     select(Agent_Mode,fares_per_trip)
  
```

*As you can see it is very simple to read*

Since the Altoona per trip price is so high, some additional analysis is required.

```{r}
    
  USAGE %>%
    group_by(Mode,Agency) %>% 
    filter(Agency == 'Altoona Metro Transit'& year == 2022) %>% 
    filter(Mode== "Demand Response") %>%
    summarise(total_trips = sum(trips))
   

```

```{r}
 USAGE_AND_FINANCIALS %>%
    filter(Agent_Mode == 'Altoona Metro Transit, Demand Response') %>% 
    select(Agent_Mode,`Total Fares`)
```

Given that there is in fact 26 recorded trips with total fares of 17,163 there might be a chance that some info is missing, and if this is the case then the Alaskan Railroad would be the answer to this problem.

#### Graphical Representation

```{r}
 ggplot(fare_per_trip,aes(x = Agent_Mode,y = fares_per_trip))+
           geom_bar(stat = "identity",aes(fill= Agent_Mode),color= 'purple',show.legend = FALSE)+
           theme_minimal()+
           theme(axis.text.x = element_text(angle = 45,vjust =1,hjust = 1))+
           labs(title = "Fairs Per UPT(Unlinked Passenger Trips)", x = "Agency & Mode",y = "Fares Per Passenger Trips")
         
```

#### Which transit system (agency and mode) has the lowest expenses per VRM?

We can use that new column along with arrange to get the lowest expense per VRM.

```{r}
         USAGE_AND_FINANCIALS %>% 
           group_by(Agent_Mode) %>% 
           mutate(expenses_per_vrm = Expenses/annual_vrm) %>% 
           arrange(expenses_per_vrm) %>% 
           select(Agent_Mode,expenses_per_vrm) %>% 
           head(5)
      
```

Using arrange(desc( ) ) gives us the ability to get the transit system with the *highest* expense per VRM.

```{r}
         USAGE_AND_FINANCIALS %>% 
           group_by(Agent_Mode) %>% 
           filter(annual_vrm != 0) %>% # to avoid dividing by 0
           mutate(expenses_per_vrm = Expenses/annual_vrm) %>% 
           arrange(desc(expenses_per_vrm)) %>% 
           select(Agent_Mode,expenses_per_vrm) %>% 
           head(5)
      
```

Notice there are several Ferryboats in this descending table. This indicates Ferries are more costly to operate then some of the other Modes like Vanpool, which does make sense.

#### Which transit system (agency and mode) has the highest total fares per VRM?

```{r}
         fares_vrm<-USAGE_AND_FINANCIALS %>%
           group_by(Agent_Mode) %>% 
           filter(annual_vrm != 0) %>% # to avoid dividing by 0
           mutate(fares_per_vrm = `Total Fares`/annual_vrm) %>%
           arrange(desc(fares_per_vrm)) %>% 
           select(Agent_Mode,fares_per_vrm) %>% 
           head(10)
         print(fares_vrm)
```

This result shows many Ferryboat modes, which makes sense as ferry's will be traveling shorter distances while charging the same or more than longer forms of transport.

#### Graphical Representation

```{r}
 ggplot(fares_vrm,aes(x = Agent_Mode,y = fares_per_vrm))+
           geom_bar(stat = "identity",aes(fill= Agent_Mode),color= 'lightblue',show.legend = FALSE)+
           theme_bw()+
           theme(axis.text.x = element_text(angle = 45,vjust =1,hjust = 1))+
           labs(title = "Fairs Per VRM(Vehicle Revenue Miles)", x = "Agency & Mode",y = "Fares Per VRM")
```
